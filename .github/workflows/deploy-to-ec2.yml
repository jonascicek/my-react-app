name: Deploy React App to EC2

on:
  push:
    branches: [main]

jobs:
  ci_build:
    runs-on: ubuntu-latest
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: 📦 Install dependencies
        run: npm ci

      - name: 🏗️ Build React App
        run: npm run build

      - name: 📤 Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: dist/

  infra_provision:
    runs-on: ubuntu-latest
    needs: ci_build
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: 🧱 Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: 🧪 Terraform Init & Apply
        run: |
          echo ">>> Terraform Init"
          terraform -chdir=terraform init

          echo ">>> Terraform Plan"
          terraform -chdir=terraform plan

          echo ">>> Terraform Apply"
          terraform -chdir=terraform apply -auto-approve

          echo ">>> Terraform Output"
          terraform -chdir=terraform output
        env:
          TF_VAR_ssh_public_key: ${{ secrets.SSH_PUBLIC_KEY }}
          TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
          TF_VAR_tf_state_bucket: ${{ secrets.TF_STATE_BUCKET }}

      - name: 💡 Set EC2 IP Output
        id: output
        run: echo "EC2_IP=$(terraform -chdir=terraform output -raw ec2_ip)" >> $GITHUB_ENV

  app_deploy:
    runs-on: ubuntu-latest
    needs: infra_provision
    steps:
      - name: 📦 Checkout code
        uses: actions/checkout@v4

      - name: 📥 Download artifact
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: dist/

      - name: 🗝️ Add SSH private key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: 🚀 Deploy to EC2
        run: |
          echo "Deploying to EC2 at IP: $EC2_IP"
          if [ -z "$EC2_IP" ]; then
            echo "❌ Fehler: EC2_IP ist leer. Deployment wird abgebrochen."
            exit 1
          fi
          scp -o StrictHostKeyChecking=no -r dist/* ubuntu@$EC2_IP:/var/www/html
          ssh -o StrictHostKeyChecking=no ubuntu@$EC2_IP 'sudo systemctl restart nginx'
